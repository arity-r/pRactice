property = count_head / n
if (0.4 < property && property < 0.6) {
count_p = count_p + 1
}
}
y[n] = count_p
}
plot(x, y, type='l')
n = 100 # maximum number of n
coin = matrix(sample(c(T,F), n*100), nrow=n, ncol=100) # make coin matrix
property = lapply(1:n, function(n)
apply(coin[1:n, ,drop=F], 2, function(x) length(which(x))/length(x))
) # calculate propotion of head
property = matrix(unlist(property), nrow=n, ncol=100, byrow=T) # list -> matrix
plot(1:n, apply(property, 1, function(x) length(x[0.4<x&x<0.6])),
type='l', xlab='#coin toss', ylab='#>0.4 and <0.6')
n = 100 # maximum number of n
# make coin matrix
coin = matrix(sample(c(T,F), n*100, replace=T), nrow=n, ncol=100)
property = lapply(1:n, function(n)
apply(coin[1:n, ,drop=F], 2, function(x) length(which(x))/length(x))
) # calculate propotion of head
property = matrix(unlist(property), nrow=n, ncol=100, byrow=T) # list -> matrix
plot(1:n, apply(property, 1, function(x) length(x[0.4<x&x<0.6])),
type='l', xlab='#coin toss', ylab='#>0.4 and <0.6')
n = 100 # maximum number of n
# make coin matrix
coin = matrix(sample(c(T,F), n*100, replace=T), nrow=n, ncol=100)
property = lapply(1:n, function(n)
apply(coin[1:n, ,drop=F], 2, function(x) length(which(x))/length(x))
) # calculate propotion of head
property = matrix(unlist(property), nrow=n, ncol=100, byrow=T) # list -> matrix
plot(1:n, apply(property, 1, function(x) length(x[0.4<x&x<0.6])),
type='l', xlab='#coin toss', ylab='#>0.4 and <0.6')
dice_sum = sum(sapply(1:3, function(x) sample(1:6, n, replace=T)))
dice_sum
dice_sum = apply(matrix(sample(1:6, n, replace=T), nrow=n, ncol=3), 1
function(x) sum(x))
dice_sum = apply(matrix(sample(1:6, n, replace=T), nrow=n, ncol=3), 1,
function(x) sum(x))
dice_sum
n = 10000
dice_sum = apply(matrix(sample(1:6, n*3, replace=T), nrow=n, ncol=3), 1,
function(x) sum(x))
dice_sum
barplot(c(length(which(dice_sum==9)), length(which(dice_sum==10))),
main='Dice sum',
names.arg=c('9', '10'))
num_9 = num_10 = 0 # counts the number of sum 9 and 10
for (i in 1:n) {
dice_1 = as.integer(runif(1) * 6 + 1) # roll three dices
dice_2 = as.integer(runif(1) * 6 + 1)
dice_3 = as.integer(runif(1) * 6 + 1)
if (dice_1 + dice_2 + dice_3 == 9) {
num_9 = num_9 + 1
}
if (dice_1 + dice_2 + dice_3 == 10) {
num_10 = num_10 + 1
}
}
barplot(c(num_9, num_10),
main='Dice sum',
names.arg=c('9', '10'))
# roll three dices
dice = function(dummy) paste(sample(1:6, 3, replace=T), collapse=' ')
# make dice matrix (attention: string format)
dice = matrix(apply(1:n*100, dice), nrow=n, ncol=100)
# roll three dices
dice = function(dummy) paste(sample(1:6, 3, replace=T), collapse=' ')
# make dice matrix (attention: string format)
dice = matrix(sapply(1:n*100, dice), nrow=n, ncol=100)
dice
n = 160
# roll three dices
dice = function(dummy) paste(sample(1:6, 3, replace=T), collapse=' ')
# make dice matrix (attention: string format)
dice = matrix(sapply(1:n*100, dice), nrow=n, ncol=100)
dice
# roll three dices
dice = function(dummy) paste(sample(1:6, 3, replace=T), collapse=' ')
# make dice matrix (attention: string format)
dice = matrix(sapply(1:n*100, dice), nrow=n, ncol=100)
win = lapply(1:n, function(n)
apply(dice[1:n, ,drop=F], 2, function(x) length(which(dice=='6 6 6'))>1)
) # winning game
dice
win = lapply(1:n, function(n)
apply(dice[1:n, ,drop=F], 2, function(x) length(which(x=='6 6 6'))>1)
) # winning game
win
dice=='6 6 6'
which(dice=='6 6 6')
dice = matrix(sapply(1:n*100, dice), nrow=n, ncol=100)
# roll three dices
dice = function(dummy) paste(sample(1:6, 3, replace=T), collapse=' ')
# make dice matrix (attention: string format)
dice = matrix(sapply(1:n*100, dice), nrow=n, ncol=100)
dice
dice=='6 6 6'
which(dice=='6 6 6')
win = lapply(1:n, function(n)
apply(dice[1:n, ,drop=F], 2, function(x) length(which(x=='6 6 6'))>1)
) # winning game
win
length(which(dice))
length(which(dice=='6 6 6'))
win
which(unlist(win)=='6 6 6')
unlist(win)
dice[1:1, ,drop=F]
win
unlsit(win)
unlist(win)
dice
which(dice=='6 6 6')
win = lapply(1:n, function(n)
apply(dice[1:n, ,drop=F], 2, function(x) length(which(x=='6 6 6')) )
) # winning game
unlist(win)
win = lapply(1:n, function(n)
apply(dice[1:n, ,drop=F], 2, function(x) length((x=='6 6 6')) )
) # winning game
win
dice
dice=='6 6 6'
which(dice=='6 6 6')
win[160]
win = lapply(1:n, function(n)
apply(dice[1:n, ,drop=F], 2, function(x) length(which(x=='6 6 6')) )
) # winning game
win[160]
win = lapply(1:n, function(n)
apply(dice[1:n, ,drop=F], 2, function(x) length(which(x=='6 6 6'))>0)
) # winning game
win[160]
win[150]
win[50]
win[100]
win[120]
win[130]
win[125]
win = matrix(unlist(win), nrow=n, ncol=100, byrow=T) # list -> matrix
win
win[160, 0]
win[100, 0]
win[100, ]
win[160, ]
dice = matrix(sapply(1:n*100, dice), nrow=n, ncol=100)
n = 160
# roll three dices
dice = function(dummy) paste(sample(1:6, 3, replace=T), collapse=' ')
# make dice matrix (attention: string format)
dice = matrix(sapply(1:n*100, dice), nrow=n, ncol=100)
win = lapply(1:n, function(n)
apply(dice[1:n, ,drop=F], 2, function(x) length(which(x=='6 6 6'))>0)
) # winning game
win = matrix(unlist(win), nrow=n, ncol=100, byrow=T) # list -> matrix
win[160]
win[160,]
x = c(1:n)
y = rep(0, n)
for (i in 1:n) {
count_win = 0
for (j in 1:100) {
for (k in 1:i) {
dice_1 = as.integer(runif(1) * 6 + 1) # roll a dice
dice_2 = as.integer(runif(1) * 6 + 1) # roll a dice
dice_3 = as.integer(runif(1) * 6 + 1) # roll a dice
if (dice_1 == 6 && dice_2 == 6 && dice_3 == 6) { # if three-six
count_win = count_win + 1 # win the game
break
}
}
}
y[i] = count_win / 100 # the probability of at least one triple-six
}
plot(x, y, main='Probability of at least one triple-six', type='l')
# roll three dices
dice = function() paste(sample(1:6, 3, replace=T), collapse=' ')
# make dice matrix (attention: string format)
dice = matrix(sapply(1:n*100, dice), nrow=n, ncol=100)
# roll three dices
dice = function() paste(sample(1:6, 3, replace=T), collapse=' ')
# make dice matrix (attention: string format)
dice = matrix(sapply(1:(n*100), dice), nrow=n, ncol=100)
# roll three dices
dice = function(dummy) paste(sample(1:6, 3, replace=T), collapse=' ')
# make dice matrix (attention: string format)
dice = matrix(sapply(1:(n*100), dice), nrow=n, ncol=100)
win = lapply(1:n, function(n)
apply(dice[1:n, ,drop=F], 2, function(x) length(which(x=='6 6 6'))>0)
) # winning game
win = matrix(unlist(win), nrow=n, ncol=100, byrow=T) # list -> matrix
plot(1:n, apply(win, 1, function(x) length(which(x)/100)),
main='Probability of at least one triple-six'
type='l', xlab='#dice roll', ylab'#win')
plot(1:n, apply(win, 1, function(x) length(which(x)/100)),
main='Probability of at least one triple-six',
type='l', xlab='#dice roll', ylab'#win')
plot(1:n, apply(win, 1, function(x) length(which(x)/100)),
main='Probability of at least one triple-six',
type='l', xlab='#dice roll', ylab='#win')
win = matrix(unlist(win), nrow=n, ncol=100, byrow=T) # list -> matrix
plot(1:n, apply(win, 1, function(x) length(which(x))/100),
main='Probability of at least one triple-six',
type='l', xlab='#dice roll', ylab='proberbility of win')
plot(1:n, apply(win, 1, function(x) length(which(x))/100),
main='Probability of at least one triple-six',
type='l', xlab='#dice roll', ylab='proberbility of win')
plot(1:n, apply(win, 1, function(x) length(which(x))/ncol(win)),
main='Probability of at least one triple-six',
type='l', xlab='#dice roll', ylab='proberbility of win')
# roll three dices
dice = function(dummy) paste(sample(1:6, 3, replace=T), collapse=' ')
# make dice matrix (attention: string format)
dice = matrix(sapply(1:(n*100), dice), nrow=n, ncol=100)
win = lapply(1:n, function(n)
apply(dice[1:n, ,drop=F], 2, function(x) length(which(x=='6 6 6'))>0)
) # winning game
win = matrix(unlist(win), nrow=n, ncol=100, byrow=T) # list -> matrix
plot(1:n, apply(win, 1, function(x) length(which(x))/ncol(win)),
main='Probability of at least one triple-six',
type='l', xlab='#dice roll', ylab='proberbility to win')
# roll three dices
dice = function(dummy) paste(sample(1:6, 3, replace=T), collapse=' ')
# make dice matrix (attention: string format)
dice = matrix(sapply(1:(n*100), dice), nrow=n, ncol=100)
win = lapply(1:n, function(n)
apply(dice[1:n, ,drop=F], 2, function(x) length(which(x=='6 6 6'))>0)
) # winning game
win = matrix(unlist(win), nrow=n, ncol=100, byrow=T) # list -> matrix
plot(1:n, apply(win, 1, function(x) length(which(x))/ncol(win)),
main='Probability of at least one triple-six',
type='l', xlab='#dice roll', ylab='proberbility to win')
# roll three dices
dice = function(dummy) paste(sample(1:6, 3, replace=T), collapse=' ')
# make dice matrix (attention: string format)
dice = matrix(sapply(1:(n*100), dice), nrow=n, ncol=100)
win = lapply(1:n, function(n)
apply(dice[1:n, ,drop=F], 2, function(x) length(which(x=='6 6 6'))>0)
) # winning game
win = matrix(unlist(win), nrow=n, ncol=100, byrow=T) # list -> matrix
plot(1:n, apply(win, 1, function(x) length(which(x))/ncol(win)),
main='Probability of at least one triple-six',
type='l', xlab='#dice roll', ylab='proberbility to win')
help(ifelse)
n = 1000 # the number of bets
dollar = ifelse(runif(n) < 18.0 / 36, 1, -1)
dollar
winnings = sapply(1:length(dollar), function(x) sum(dollar[1:x]))
winnings
n = 1000 # the number of bets
dollar = ifelse(runif(n) < 18.0 / 36, 1, -1)
winnings = sapply(1:length(dollar), function(x) sum(dollar[1:x]))
plot(1:n, winnings, type='l',
xlab='bet_num', ylab='winnings')
0:36
1/36
n = 1000 # the number of bets
dollar = ifelse(runif(n) < 1 / 36, 35, -1)
winnings = sapply(1:length(dollar), function(x) sum(dollar[1:x]))
plot(1:n, winnings, type='l',
xlab='bet_num', ylab='winnings')
n = 1000 # the number of bets
dollar = ifelse(runif(n) < 1 / 36, 35, -1)
winnings = cumsum(dollar)
#sapply(1:length(dollar), function(x) sum(dollar[1:x]))
plot(1:n, winnings, type='l',
xlab='bet_num', ylab='winnings')
n = 1000 # the number of bets
dollar = ifelse(runif(n) < 18 / 36, 1, -1)
winnings = cumsum(dollar)
plot(1:n, winnings, type='l',
xlab='bet_num', ylab='winnings')
eval(parse(text='4+3'))
paste('33', 3)
paste(c('33', 3))
paste(c('33', 3), collapse='')
win_rate = cumsum(win_rate / sum(win_rate))
race = runif(1)
rate_table = data.frame(Horse=win_Horse, Rate=win_rate)
sentence = apply(rate_table, 1, function(x) paste(
c('ifelse(race<', x$Rate, ',', x$Horse, ',\n')))
n = 1000        # the number of race
win_rate = c(.3, .4, .2, .1)
win_horse = c('A', 'B', 'C', 'D')
win_rate = cumsum(win_rate / sum(win_rate))
race = runif(1)
rate_table = data.frame(Horse=win_Horse, Rate=win_rate)
sentence = apply(rate_table, 1, function(x) paste(
c('ifelse(race<', x$Rate, ',', x$Horse, ',\n')))
rate_table = data.frame(Horse=win_horse, Rate=win_rate)
sentence = apply(rate_table, 1, function(x) paste(
c('ifelse(race<', x$Rate, ',', x$Horse, ',\n')))
rate_table[1:1, 0]
rate_table[1:1, 2]
rate_table[1:1]
rate_table[1:1, ]
rate_table[1:1, ]$Horse
win_rate = cumsum(win_rate / sum(win_rate))
race = runif(n)
rate_table = data.frame(Horse=win_horse, Rate=win_rate)
sentence = apply(rate_table, 1, function(x) paste(
c('ifelse(race<', x$Rate, ',', x$Horse, ',\n')))
sentence
win_rate = cumsum(win_rate / sum(win_rate))
race = runif(n)
rate_table = data.frame(Horse=win_horse, Rate=win_rate)
sentence = apply(rate_table, 1, function(x) paste(
c('ifelse(race<', x['Rate'], ',', x['Horse'], ',\n'), collapse='') )
sentence
paste(c(sesntence, rep(')', length(win_horse))), collapse='')
paste(c(sentence, rep(')', length(win_horse))), collapse='')
s =paste(c(sentence, rep(')', length(win_horse))), collapse='')
eval(parse(text=s))
win_rate = cumsum(win_rate / sum(win_rate))
race = runif(n)
rate_table = data.frame(Horse=win_horse, Rate=win_rate)
sentence = apply(rate_table, 1, function(x) paste(
c('ifelse(race<', x['Rate'], ',"', x['Horse'], '",\n'), collapse='') )
sentence = paste(c(sentence, rep(')', length(win_horse))), collapse='')
eval(parse(text=sentence))
n = 1000        # the number of race
win_rate = c(.3, .4, .2, .1)
win_horse = c('Acorn', 'Balky', 'Chestnut', 'Dolby')
# cumlative winning rate for a horse
win_rate = cumsum(win_rate / sum(win_rate))
# create table for apply function
rate_table = data.frame(Horse=win_horse, Rate=win_rate)
# generate sentence for eval
sentence = apply(rate_table, 1, function(x) paste(
c('ifelse(race<', x['Rate'], ',"', x['Horse'], '",\n'), collapse='') )
sentence = paste(c(sentence, rep(')', length(win_horse))), collapse='')
# do simulation
race = runif(n)
result = eval(parse(text=sentence))
barplot(result, main='Horse Races', names.arg=win_horse)
barplot(sapply(win_horse, function(x) length(which(result==x))),
main='Horse Races', names.arg=win_horse)
n = 1000        # the number of race
win_rate = c(.3, .4, .2, .1)
win_horse = c('Acorn', 'Balky', 'Chestnut', 'Dolby')
# cumlative winning rate for a horse
win_rate = cumsum(win_rate / sum(win_rate))
# create table for apply function
rate_table = data.frame(Horse=win_horse, Rate=win_rate)
# generate sentence for eval
sentence = apply(rate_table, 1, function(x) paste(
c('ifelse(race<', x['Rate'], ',"', x['Horse'], '",\n'), collapse='') )
sentence = paste(c(sentence, rep(')', length(win_horse))), collapse='')
# do simulation
race = runif(n)
result = eval(parse(text=sentence))
barplot(sapply(win_horse, function(x) length(which(result==x))),
main='Horse Races', names.arg=win_horse)
n = 1000        # the number of race
win_rate = c(.3, .4, .2, .1)
win_horse = c('Acorn', 'Balky', 'Chestnut', 'Dolby')
# cumlative winning rate for a horse
win_rate = cumsum(win_rate / sum(win_rate))
# create table for apply function
rate_table = data.frame(Horse=win_horse, Rate=win_rate)
# generate sentence for eval
sentence = apply(rate_table, 1, function(x) paste(
c('ifelse(race<', x['Rate'], ',"', x['Horse'], '",\n'), collapse='') )
sentence = paste(c(sentence, rep(')', length(win_horse))), collapse='')
# do simulation
race = runif(n)
result = eval(parse(text=sentence))
barplot(sapply(win_horse, function(x) length(which(result==x))),
main='Horse Races', names.arg=win_horse)
n = 40 # the number of game
penny = ifelse(runif(n) < 1/2, 1, -1)
peter = cumsum(penny)
plot(1:n, peter, type='l', xlab='bet', ylab='winnings') # then, draw the graph
n = 20 # the amount of random numbers
runif(n)
n = 1000 # number of games
win_rate = function(is_serve) if is_serve 0.6 else 0.5
game = function(is_serve, me, opponent) {
if (me == 21) return T # win the game
else if (opponent == 21) return F # lose the game
else if (runif(1) < win_rate(is_serve)) # win the point
return result(T, me+1, opponent) # win
else
return result(F, me, opponent+1) # lose
}
simulation = function(n) {
sapply(1:n, function(x) game(T, 0, 0))
}
cat('win probability: ', simulation(n) / n)
n = 1000 # number of games
win_rate = function(is_serve) if (is_serve) 0.6 else 0.5
game = function(is_serve, me, opponent) {
if (me == 21) return T # win the game
else if (opponent == 21) return F # lose the game
else if (runif(1) < win_rate(is_serve)) # win the point
return result(T, me+1, opponent) # win
else
return result(F, me, opponent+1) # lose
}
simulation = function(n) {
sapply(1:n, function(x) game(T, 0, 0))
}
cat('win probability: ', simulation(n) / n)
help(sapply)
n = 1000 # number of games
win_rate = function(is_serve) if (is_serve) 0.6 else 0.5
game = function(is_serve, me, opponent) {
if (me == 21) return T # win the game
else if (opponent == 21) return F # lose the game
else if (runif(1) < win_rate(is_serve)) # win the point
return result(T, me+1, opponent) # win
else
return result(F, me, opponent+1) # lose
}
simulation = function(n) {
sapply(1:n, function(x) game(T, 0, 0))
}
cat('win probability: ', simulation(n) / n)
n = 1000 # number of games
win_rate = function(is_serve) if (is_serve) 0.6 else 0.5
game = function(is_serve, me, opponent) {
if (me == 21) return T # win the game
else if (opponent == 21) return F # lose the game
else if (runif(1) < win_rate(is_serve)) # win the point
result(T, me+1, opponent) # win
else
result(F, me, opponent+1) # lose
}
simulation = function(n) {
sapply(1:n, function(x) game(T, 0, 0))
}
cat('win probability: ', simulation(n) / n)
game = function(is_serve, me, opponent) {
if (me == 21) return T # win the game
else if (opponent == 21) return F # lose the game
else if (runif(1) < win_rate(is_serve)) # win the point
game(T, me+1, opponent) # win
else
game(F, me, opponent+1) # lose
}
n = 1000 # number of games
win_rate = function(is_serve) if (is_serve) 0.6 else 0.5
game = function(is_serve, me, opponent) {
if (me == 21) T # win the game
else if (opponent == 21) F # lose the game
else if (runif(1) < win_rate(is_serve)) # win the point
game(T, me+1, opponent) # win
else
game(F, me, opponent+1) # lose
}
simulation = function(n) {
sapply(1:n, function(x) game(T, 0, 0))
}
cat('win probability: ', simulation(n) / n)
cat('win probability: ', sum(simulation(n)) / n)
win_count = 0 # the number of games which I won
for (i in 1:n) {
score_me = score_oppornent = 0
is_serve_me = TRUE
while (score_me < 21 && score_oppornent < 21) {
# if I serve, win with probability 0.6 and
# oppornent serve, win with probability of 0.5
if (is_serve_me && runif(1) < 0.6 || !is_serve_me && runif(1) < 0.5) {
score_me = score_me + 1
is_serve_me = TRUE
} else {
score_oppornent = score_oppornent + 1
is_serve_me = FALSE
}
}
if (score_me > score_oppornent) {
win_count = win_count + 1
}
}
cat('win probability: ', win_count / n)
n = 1000 # number of games
win_rate = function(is_serve) if (is_serve) 0.6 else 0.5
game = function(is_serve, me, opponent) {
if (me == 21) T # win the game
else if (opponent == 21) F # lose the game
else if (runif(1) < win_rate(is_serve)) # win the point
game(T, me+1, opponent) # win
else
game(F, me, opponent+1) # lose
}
simulation = function(n) {
sapply(1:n, function(x) game(T, 0, 0))
}
cat('win probability: ', sum(simulation(n)) / n)
x = 1:1000
length(x[x%%3==0])
length(x)
length(x[x>=10])
length(x[x>=500])
y=1:10
length(y)
length(y[y>9])
setwd('D/pRactice')
setwd('D:/pRactice')
aj = read.csv('apple_juice.csv')
summary(aj)
a = matrix(c(1,2,5,2,5,7,3,9,8), 3,3)
b = matrix(c(2, 10, 20))
solve(a, b)
x = seq(0, 1, len=1000)
y1= x^2
y2=exp(x)-1
# (1)
plot(x, y1, ylim=c(0, max(y1, y2)), type='l')
lines(x, y2, type='l')
