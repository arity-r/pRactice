}
points(x, y, pch=16, col='black')
points(x, histdata$density, pch=16, col='skyblue')
#' Example 5.4 LondonBombs
n = 400 # the number of bombs
area = array(data=0, dim=c(10, 10))
bombs = data.frame(x=runif(n, min=0, max=10), y=runif(n, min=0, max=10))
f <- function(x) {
area[ceiling(x[1]), ceiling(x[2])] <<- area[ceiling(x[1]), ceiling(x[2])] + 1
}
invisible(apply(bombs, 1, f))
par(mfrow=c(1,2))
# First, plot where these bomb landed
plot(bombs$x, bombs$y, axes=F, xlab='', ylab='',
xlim=c(0, dim(area)[1]), ylim=c(0, dim(area)[2]),
pch=16, cex=.5, col='skyblue', asp=1)
abline(h=c(0:dim(area)[1]))
abline(v=c(0:dim(area)[2]))
# Then, Poisson distribution with simulation result
# poisson distribution
lambda = n / prod(dim(area))
x=0:max(as.vector(area))
y=sapply(x, function(k) lambda^k / factorial(k) * exp(-lambda))
# simulation result as a histgram
histdata$counts = sapply(x, function(x) length(as.vector(area)[as.vector(area) == x]))
histdata$density = sapply(histdata$counts, function(x) x / sum(histdata$counts))
# plot them
plot(c(), xlab='', ylab='', ylim=c(0,max(c(y, histdata$density))), xlim=c(0,length(x)),
main=sprintf('Poisson distribution (lambda=%0.3f)', lambda),)
for (i in 1:length(x)) {
lines(c(x[i], x[i]), c(0, max(c(y[i], histdata$density[i]))))
}
points(x, y, pch=16, col='black')
points(x, histdata$density, pch=16, col='skyblue')
#' Example 5.4 LondonBombs
n = 400 # the number of bombs
area = array(data=0, dim=c(10, 10))
bombs = data.frame(x=runif(n, min=0, max=10), y=runif(n, min=0, max=10))
invisible(apply(bombs, 1, function(x) {
area[ceiling(x[1]), ceiling(x[2])] <<- area[ceiling(x[1]), ceiling(x[2])] + 1
}))
par(mfrow=c(1,2))
# First, plot where these bomb landed
plot(bombs$x, bombs$y, axes=F, xlab='', ylab='',
xlim=c(0, dim(area)[1]), ylim=c(0, dim(area)[2]),
pch=16, cex=.5, col='skyblue', asp=1)
abline(h=c(0:dim(area)[1]))
abline(v=c(0:dim(area)[2]))
# Then, Poisson distribution with simulation result
# poisson distribution
lambda = n / prod(dim(area))
x=0:max(as.vector(area))
y=sapply(x, function(k) lambda^k / factorial(k) * exp(-lambda))
# simulation result as a histgram
histdata$counts = sapply(x, function(x) length(as.vector(area)[as.vector(area) == x]))
histdata$density = sapply(histdata$counts, function(x) x / sum(histdata$counts))
# plot them
plot(c(), xlab='', ylab='', ylim=c(0,max(c(y, histdata$density))), xlim=c(0,length(x)),
main=sprintf('Poisson distribution (lambda=%0.3f)', lambda),)
for (i in 1:length(x)) {
lines(c(x[i], x[i]), c(0, max(c(y[i], histdata$density[i]))))
}
points(x, y, pch=16, col='black')
points(x, histdata$density, pch=16, col='skyblue')
pi
abs(2.5)
abs)-2.5
abs(-2.5)
exp(0)
exp(1)
help(exp)
for (n in 1:100) {
if (n %/% 3 == 0 and n %/% 5 != 0) print('fizz')
if (n %/% 3 != 0 and n %/% 5 == 0) print('buzz')
if (n %/% 3 == 0 and n %/% 5 == 0) print('fizzbuzz')
if (n %/% 3 != 0 and n %/% 5 != 0) print(n)
}
for (n in 1:100) {
if (n %/% 3 == 0 & n %/% 5 != 0) print('fizz')
if (n %/% 3 != 0 & n %/% 5 == 0) print('buzz')
if (n %/% 3 == 0 & n %/% 5 == 0) print('fizzbuzz')
if (n %/% 3 != 0 & n %/% 5 != 0) print(n)
}
for (n in 1:100) {
if (n %/% 3 == 0 & n %/% 5 != 0) print('fizz')
if (n %/% 3 != 0 & n %/% 5 == 0) print('buzz')
if (n %/% 3 == 0 & n %/% 5 == 0) print('fizzbuzz')
if (n %/% 3 != 0 & n %/% 5 != 0) print(n)
}
for (n in 1:100) {
print (n)
if (n %/% 3 == 0 & n %/% 5 != 0) print('fizz')
if (n %/% 3 != 0 & n %/% 5 == 0) print('buzz')
if (n %/% 3 == 0 & n %/% 5 == 0) print('fizzbuzz')
if (n %/% 3 != 0 & n %/% 5 != 0) print(n)
}
for (n in 1:100) {
if (n %/% 3 == 0 & n %/% 5 != 0) {print('fizz')}
if (n %/% 3 != 0 & n %/% 5 == 0) print('buzz')
if (n %/% 3 == 0 & n %/% 5 == 0) print('fizzbuzz')
if (n %/% 3 != 0 & n %/% 5 != 0) print(n)
}
for (n in 1:100) {
if (n %/% 3 == 0 & n %/% 5 != 0) print('fizz')
if (n %/% 3 != 0 & n %/% 5 == 0) print('buzz')
if (n %/% 3 == 0 & n %/% 5 == 0) print('fizzbuzz')
if (n %/% 3 != 0 & n %/% 5 != 0) print(n)
}
for (n in 1:100) {
print (n)
#if (n %/% 3 == 0 & n %/% 5 != 0) print('fizz')
#if (n %/% 3 != 0 & n %/% 5 == 0) print('buzz')
#if (n %/% 3 == 0 & n %/% 5 == 0) print('fizzbuzz')
#if (n %/% 3 != 0 & n %/% 5 != 0) print(n)
}
for (n in 1:10) {
if (n %/% 3 == 0 & n %/% 5 != 0) print('fizz')
if (n %/% 3 != 0 & n %/% 5 == 0) print('buzz')
if (n %/% 3 == 0 & n %/% 5 == 0) print('fizzbuzz')
if (n %/% 3 != 0 & n %/% 5 != 0) print(n)
}
for (n in 1:10) {
print (n %% 3)
if (n %/% 3 == 0 & n %/% 5 != 0) print('fizz')
if (n %/% 3 != 0 & n %/% 5 == 0) print('buzz')
if (n %/% 3 == 0 & n %/% 5 == 0) print('fizzbuzz')
if (n %/% 3 != 0 & n %/% 5 != 0) print(n)
}
n = scan()
if (n %% 3 != 0 & n %% 5 == 0) print('divisible by five')
if (n %% 3 == 0 & n %% 5 == 0) print('divisible by three and five')
if (n %% 3 != 0 & n %% 5 != 0) print('not divisible by three and five')
for (n in 1:10) {
if (n %% 3 == 0 & n %% 5 != 0) print('fizz')
if (n %% 3 != 0 & n %% 5 == 0) print('buzz')
if (n %% 3 == 0 & n %% 5 == 0) print('fizzbuzz')
if (n %% 3 != 0 & n %% 5 != 0) print(n)
}
for (n in 1:100) {
if (n %% 3 == 0 & n %% 5 != 0) print('fizz')
if (n %% 3 != 0 & n %% 5 == 0) print('buzz')
if (n %% 3 == 0 & n %% 5 == 0) print('fizzbuzz')
if (n %% 3 != 0 & n %% 5 != 0) print(n)
}
n = -1
while (n %% 3 == 0) {
n = scan()
}
100
n=scan()
n = -1
while (n %% 3 == 0) {
n = scan()
}
n
n%%3
for (w in c('fuji', 'ohrin')) {
print(paste('delicious', x))
}
for (w in c('fuji', 'ohrin')) {
print(paste('delicious', w))
}
n = scan()
if (n %% 3 != 0 & n %% 5 == 0) print('divisible by five')
if (n %% 3 == 0 & n %% 5 == 0) print('divisible by three and five')
if (n %% 3 != 0 & n %% 5 != 0) print('not divisible by three and five')
help(scan)
help(edit)
edit(n)
readline()
readline()
help(readline())
help(readline)
htlp(integer)
help(integer)
n = as.integer(readline())
if (n %% 3 != 0 & n %% 5 == 0) print('divisible by five')
if (n %% 3 == 0 & n %% 5 == 0) print('divisible by three and five')
if (n %% 3 != 0 & n %% 5 != 0) print('not divisible by three and five')
#n = scan()
n = as.integer(readline())
if (n %% 3 != 0 & n %% 5 == 0) print('divisible by five')
if (n %% 3 == 0 & n %% 5 == 0) print('divisible by three and five')
if (n %% 3 != 0 & n %% 5 != 0) print('not divisible by three and five')
f = function(x) paste('delicious', x)
f('fuji')
f('ohrin')
n = -1
while (n %% 3 == 0) {
n = scan(n=1)
}
n=scan()
if (n %% 3 == 0 & n %% 5 != 0) print('divisible by three')
if (n %% 3 != 0 & n %% 5 == 0) print('divisible by five')
if (n %% 3 == 0 & n %% 5 == 0) print('divisible by three and five')
if (n %% 3 != 0 & n %% 5 != 0) print('not divisible by three and five')
n=-1
while(n%%3==0) {}
while(n%%3==0) {
}
n = -1
while (n %% 3 != 0) {
n = scan(n)
}
while(n%%3!=0) {}
n = -1
while (n %% 3 != 0) {
n = scan(n)
}
n = -1
while (n %% 3 != 0) {
n = scan(n)
}
n = -1
while (n %% 3 != 0) {
n = scan()
}
if(c(T,F,F)) print(7)
aj = read.csv('apple_juice.csv')
hist(aj$pH, main='pH of apple juice')
setcwd("D:\pRactice")
setcwd("D:/pRactice")
setwd("D:/pRactice")
aj = read.csv('apple_juice.csv')
hist(aj$pH, main='pH of apple juice')
length(aj)
nrow(aj)
aj
summary(aj)
aj = read.csv('apple_juice.csv')
boxplot(aj$pH[aj$Growth==0], aj$pH[aj$Growth==1])
aj = read.csv('apple_juice.csv')
boxplot(aj$pH[aj$Growth==0], aj$pH[aj$Growth==1],
main='pH comparison',
names.arg=c('Growth=0', 'Growth=1'))
boxplot(aj$pH[aj$Growth==0], aj$pH[aj$Growth==1],
main='pH comparison',
xlab=c('Growth=0', 'Growth=1'))
help(boxplot)
aj = read.csv('apple_juice.csv')
boxplot(aj$pH[aj$Growth==0], aj$pH[aj$Growth==1],
main='pH comparison',
names=c('Growth=0', 'Growth=1'))
aj = read.csv('apple_juice.csv')
boxplot(aj$pH[aj$Growth==0], aj$pH[aj$Growth==1],
main='pH comparison',
names=c('Growth=0', 'Growth=1'),
ylab='pH')
minutes = 123
hours = minutes %/% 60
minutes = minutes %% 60
print(paste(hours, ':', minutes))
print(sprintf('%d:%02d', hours, minutes))
ap = read.csv('apple_production.csv')
plot(ap$Gross, xlab=ap$Year)
plot(ap$Year, ap$Gross, xlab=ap$Year)
plot(ap$Year, ap$Gross, names.arg=ap$Year)
plot(ap$Year, ap$Gross)
warnings(plot(ap$Year, ap$Gross))
warnings(plot(ap$Year, ap$Gross))
ap = read.csv('apple_production.csv')
warnings(plot(ap$Year, ap$Gross))
warnings(plot(ap$Year, ap$Gross, xlab=ap$Year))
warnings(plot(ap$Year, ap$Gross, type='l'))
ap$Gross
ap = read.csv('apple_production.csv')
warnings(plot(ap$Year, ap$Gross, type='l'))
ap$Year
ap$Gross
len(ap$Year)
length(ap$Year)
length(ap$Gross)
ap = read.csv('apple_production.csv')
plot(ap$Year, ap$Gross, type='l')
warnings()
ap = read.csv('apple_production.csv')
plot(ap$Year, ap$Gross, type='l',
main='Japanese gross apple production',
xlab='Year', ylab='Production(ton)')
cols(ap)
col(ap)
ap[,1]
ap
ap[,1]
ap[1,]
colname(ap)
help(col)
help(data.frame)
row.names(ap)
names(ap)
names(ap)[:1]
names(ap)[2:]
names(ap)[2:length(names(ap))]
names(ap)[3:length(names(ap))]
ap[,1]
ap[1,]
ap[1,][3:6]
c(ap[1,][3:6], cp[1,][2]-sum(cp[1,][3:6])
)
c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6]))
names(ap)
ap = read.csv('apple_production.csv')
barplot(c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6])),
names.arg=c(names(ap)[3:6], 'Other'))
ap = read.csv('apple_production.csv')
barplot(c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6])))#,
ap = read.csv('apple_production.csv')
c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6]))
barplot(as.vector(c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6]))))#,
c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6]))
barplot(as.vector(c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6]))))#,
ap = read.csv('apple_production.csv')
c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6]))
barplot(as.vector(c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6])))
names.arg=c(names(ap)[3:6], 'Others'))
barplot(as.vector(c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6]))),
names.arg=c(names(ap)[3:6], 'Others'))
ap = read.csv('apple_production.csv')
as.vector(c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6]))
)
help(vector)
as.vector(c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6]))[[1]])
as.vector(c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6])))[1]
as.vector(c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6])))[2]
as.vector(c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6])))[[1]]
as.vector(c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6])), mode='list')
as.vector(c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6])))
as.list(c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6])))
c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6]))
c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6]))
a = c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6]))
a.type
type(a)
help(type)
typeof(a)
as.vector(a)
help(list)
as.matrix(a)
as.vector(a)
as.vector(a[1])
as.vector(a[[]])
help(c)
names(a)
as.vector(x)
as.vector(a)
unlist(a)
unlist(a[[1]])
help(unlist)
unlist(a, use.names=F)
help(c)
ap = read.csv('apple_production.csv')
a = unlist(c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6])), use.names=F)
barplot(unlist(c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6])), use.names=F)),
names.arg=c(names(ap)[3:6], 'Others'))
barplot(unlist(c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6])), use.names=F),
names.arg=c(names(ap)[3:6], 'Others'))
ap = read.csv('apple_production.csv')
a = unlist(c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6])), use.names=F)
barplot(unlist(c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6])), use.names=F),
main='Japanese apple production 2014',
names.arg=c(names(ap)[3:6], 'Others'),
ylab='Production(ton)')
ap_2014 = c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6]))
names(ap_2014) <- c('Fuji', 'Tsugaru', 'Orin', 'JonaGold', 'Others')
ap_2014
pie(unlist(c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6])), use.names=F),
main='Japanese apple production 2014',
names.arg=c(names(ap)[3:6], 'Others'),
)
ap_2014 = c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6]))
names(ap_2014) <- c('Fuji', 'Tsugaru', 'Orin', 'JonaGold', 'Others')
pie(ap_2014,
main='Japanese apple production 2014')
ap_2014
ap = read.csv('apple_production.csv')
# use anlist for dropping names from data frame
ap_2014 = c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6]))
names(ap_2014) <- c('Fuji', 'Tsugaru', 'Orin', 'JonaGold', 'Others')
pie(ap_2014,
main='Japanese apple production 2014')
ap_2014 = c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6]))
names(ap_2014) <- c('Fuji', 'Tsugaru', 'Orin', 'JonaGold', 'Others')
pie(ap_2014, radius=1
main='Japanese apple production 2014')
# ... and, that's how I make an apple pie (chart).
ap_2014 = c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6]))
names(ap_2014) <- c('Fuji', 'Tsugaru', 'Orin', 'JonaGold', 'Others')
pie(ap_2014, radius=1,
main='Japanese apple production 2014')
ap
pie(ap_2014, radius=1,
main='Japanese apple production 2014')
ap = read.csv('apple_production.csv')
ap_2014 = c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6]))
names(ap_2014) <- c('Fuji', 'Tsugaru', 'Orin', 'JonaGold', 'Others')
pie(ap_2014, radius=1,
main='Japanese apple production 2014')
phone=c(47, 27, 20, 2, 3)
warnings()
phone
names(phone)=c('docomo', 'au', 'sb', 'emob')
names
phone
ap_2014
ap_2014 = unlist(c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6])), use.names=F)
names(ap_2014) <- c('Fuji', 'Tsugaru', 'Orin', 'JonaGold', 'Others')
ap_2014
ap = read.csv('apple_production.csv')
ap_2014 = unlist(c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6])), use.names=F)
names(ap_2014) <- c('Fuji', 'Tsugaru', 'Orin', 'JonaGold', 'Others')
pie(ap_2014, radius=1,
main='Japanese apple production 2014')
help(pie)
help(barplot)
ap = read.csv('apple_production.csv')
ap_2014 = unlist(c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6])), use.names=F)
names(ap_2014) = c(names(ap)[3:6], 'Others')
pie(ap_2014, radius=1,
main='Japanese apple production 2014')
ap = read.csv('apple_production.csv')
ap_2014 = unlist(c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6])), use.names=F)
names(ap_2014) = c(names(ap)[3:6], 'Others')
ap_2014.col = c('orange', 'red', 'green', 'orange', 'yellow')
pie(ap_2014, radius=1, col=ap_2014.col
main='Japanese apple production 2014')
ap = read.csv('apple_production.csv')
ap_2014 = unlist(c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6])), use.names=F)
names(ap_2014) = c(names(ap)[3:6], 'Others')
ap_2014.col = c('orange', 'red', 'green', 'orange', 'yellow')
pie(ap_2014, radius=1, col=ap_2014.col,
main='Japanese apple production 2014')
ap_2014.col = c('orangered', 'red', 'green', 'orange', 'yellow')
pie(ap_2014, radius=1, col=ap_2014.col,
main='Japanese apple production 2014')
ap = read.csv('apple_production.csv')
# use anlist for dropping names from data frame
barplot(unlist(c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6])), use.names=F),
main='Japanese apple production 2014',
names.arg=c(names(ap)[3:6], 'Others'),
ylab='Production(ton)')
aj = read.csv('apple_juice.csv')
boxplot(aj$pH[aj$Growth==0], aj$pH[aj$Growth==1],
main='pH comparison',
names=c('Growth=0', 'Growth=1'),
ylab='pH')
aj = read.csv('apple_juice.csv')
hist(aj$pH, main='pH of apple juice')
ap = read.csv('apple_production.csv')
plot(ap$Year, ap$Gross, type='l',
main='Japanese gross apple production',
xlab='Year', ylab='Production(ton)')
x = seq(-10, 10, len=1000)
plot(x, x, type='l') # y = x
x = seq(-pi, pi, len=1000)
plot(x, cos(x), type='l') # y = cos(x)
x = seq(0, 10, len=1000)
plot(x, floor(x), type='l') # y = floor(x)
x = seq(0, 1, len=1000)
y1= x^2
y2=exp(x)
# (1)
plot(x, y1, ylim=c(0, max(y1, y2)), type='l')
lines(x, y2, type='l')
# (2)
par(mfrow=c(1,2))
plot(x, y1, type='l')
plot(x, y2, type='l')
par(mfrow=c(1,1)) # just restoring previous plot number
ap = read.csv('apple_production.csv')
plot(ap$Year, ap$Gross, type='l',
main='Japanese gross apple production',
xlab='Year', ylab='Production(ton)')
x = seq(0, 1, len=1000)
y1= x^2
y2=exp(x)-1
par(mfrow=c(1,2))
plot(x, y1, type='l')
plot(x, y2, type='l')
par(mfrow=c(1,1)) # just restoring previous plot number
plot(x, y1, ylim=c(0, max(y1, y2)), type='l')
lines(x, y2, type='l')
ap = read.csv('apple_production.csv')
plot(ap$Year, ap$Gross, type='l',
main='Japanese gross apple production',
xlab='Year', ylab='Production(ton)')
ap = read.csv('apple_production.csv')
plot(ap$Year, ap$Production, type='l',
main='Japanese apple production',
xlab='Year', ylab='Production(ton)')
ap = read.csv('apple_production.csv')
plot(ap$Year, ap$Production, type='l',
main='Japanese apple production',
xlab='Year', ylab='Production(ton)')
aj = read.csv('apple_juice.csv')
hist(aj$pH, main='pH of apple juice')
aj = read.csv('apple_juice.csv')
boxplot(aj$pH[aj$Growth==0], aj$pH[aj$Growth==1],
main='pH comparison',
names=c('Growth=0', 'Growth=1'),
ylab='pH')
ap = read.csv('apple_production.csv')
# use anlist for dropping names from data frame
barplot(unlist(c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6])), use.names=F),
main='Japanese apple production 2014',
names.arg=c(names(ap)[3:6], 'Others'),
ylab='Production(ton)')
ap = read.csv('apple_production.csv')
ap_2014 = unlist(c(ap[1,][3:6], ap[1,][2]-sum(ap[1,][3:6])), use.names=F)
names(ap_2014) = c(names(ap)[3:6], 'Others')
ap_2014.col = c('orangered', 'red', 'green', 'orange', 'yellow')
pie(ap_2014, radius=1, col=ap_2014.col,
main='Japanese apple production 2014')
